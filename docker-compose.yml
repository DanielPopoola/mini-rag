version: '3.8'

services:
  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: mini-rag-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "sh", "-c", "wget -q --spider http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Local LLM Service (Ollama)
  ollama:
    image: ollama/ollama:latest
    container_name: mini-rag-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - rag-network
    # Pull the model after container starts
    entrypoint: >
      bash -c "
        ollama serve &
        sleep 10 &&
        ollama pull llama3.1:8b &&
        wait
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s  # LLM download takes time

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mini-rag-backend
    ports:
      - "9000:9000"
    environment:
      - QDRANT_URL=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=gemma3:1b
      - LOG_LEVEL=INFO
    volumes:
      - ./app:/app/app  # For development hot-reload
      - backend_logs:/app/logs
    networks:
      - rag-network
    depends_on:
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Streamlit Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: mini-rag-frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://backend:9000
    volumes:
      - ./frontend:/app  # For development hot-reload
    networks:
      - rag-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

networks:
  rag-network:
    driver: bridge

volumes:
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  backend_logs:
    driver: local